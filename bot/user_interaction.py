from aiogram import Bot, types
from aiogram.dispatcher  import FSMContext
from aiogram.dispatcher.filters import Command
from bot import states
from bot.db_interaction import get_user_by_telegram_id, create_user, update_user_state, get_all_files, \
    log_user_file_interaction
from bot.db_interaction import db_session
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


from aiogram import Bot, types

import os

from bot.mail import send_email
from models.models import BotFile, BotUser


welcome = """–ü—Ä–∏–≤–µ—Ç üëãüèª
ü§ñ –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ PRO –û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ 
üíå –Ø —É–º–µ—é –≤—ã—Å—ã–ª–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –∏–ª–∏ –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ —Å–≤–æ—ë –∏–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ üëêüèª"""

chose_file = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, –∫–∞–∫–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üëáüèª"
chose_travel = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫:"
email_send = """–ë–ª–∞–≥–æ–¥–∞—Ä—é –í–∞—Å, 
–°–∫–æ—Ä–µ–µ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ—á—Ç—É, –ø–∏—Å—å–º–æ —É–∂–µ –≤ –ø—É—Ç–∏!"""
email_subject = """–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –∫–∞–Ω–∞–ª–∞ PRO –û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ"""
email_body = """<p>–ü—Ä–∏–≤–µ—Ç, 
</p>
    <p>–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∫ —ç—Ç–æ–º—É –ø–∏—Å—å–º—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è  —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫</p>"""
succses_chat_send = "–í–æ—Ç –í–∞—à –ø–æ–¥–∞—Ä–æ–∫:"


def get_full_file_path(file_name):
    # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à –∫–æ–¥
    code_dir_path = os.path.dirname(os.path.abspath(__file__))

    # –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    project_root_path = os.path.dirname(code_dir_path)

    # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏
    files_dir_path = os.path.join(project_root_path, 'files')

    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    full_file_path = os.path.join(files_dir_path, file_name)

    return full_file_path


async def send_file_in_chat(file_name: str, message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ —á–∞—Ç.

    Args:
    file_name (str): –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –±–æ—Ç–æ–º.

    """
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ get_file_path(file_name) - —ç—Ç–æ –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.

    file_path = get_full_file_path(file_name)
    print(file_path)
    with open(file_path, 'rb') as file:
        await message.answer_document(file, caption=f"{succses_chat_send}: {file_name}")


async def process_start_command(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    with db_session() as db:
        user = get_user_by_telegram_id(message.from_user.id, db)
        if not user:
            # –ï—Å–ª–∏ –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ENTER_NAME
            await states.UserState.ENTER_NAME.set()
            await message.answer(welcome)
        else:
            # –ï—Å–ª–∏ –¥–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSE_FILE
            await states.UserState.CHOOSE_FILE.set()
            await send_file_list(message, state)


async def process_enter_name(message: types.Message, state: FSMContext):
    with db_session() as db:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏–º—è
        user_name = message.text
        create_user(telegram_id=message.from_user.id, name=user_name, db=db)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSE_FILE –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    await states.UserState.CHOOSE_FILE.set()
    await send_file_list(message, state)


async def send_file_list(message: types.Message, state: FSMContext):
    with db_session() as db:
        files = get_all_files(db)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for file in files:
            keyboard.add(types.KeyboardButton(file.name))
        await message.answer(chose_file, reply_markup=keyboard)
        files_data = [file.name for file in files]
        print(f"Saving files data: {files_data}")
        print(state)
        # await state.update_data({"files": files_data})
        await state.update_data({"files": {file.id: file.name for file in files}})

async def process_choose_file(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    user_data = await state.get_data()
    print(user_data, message.text)
    if message.text not in user_data['files'].values():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSE_DELIVERY
    await state.update_data({"chosen_file": message.text})
    await states.UserState.CHOOSE_DELIVERY.set()

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–í —á–∞—Ç"))
    keyboard.add(types.KeyboardButton("–ù–∞ –ø–æ—á—Ç—É"))
    await message.answer(chose_travel, reply_markup=keyboard)

async def get_file_name(display_name):
    with db_session() as db:
        file = db.query(BotFile).filter(BotFile.name == display_name).first()
        return file.path if file else None


async def process_choose_delivery(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
    if message.text not in ["–í —á–∞—Ç", "–ù–∞ –ø–æ—á—Ç—É"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∏ –ª–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∞–π–ª–æ–º
    user_data = await state.get_data()
    print(user_data)
    file_id = next((id_ for id_, name in user_data['files'].items() if name == user_data['chosen_file']), None)
    with db_session() as db:
        log_user_file_interaction(user_id=message.from_user.id,
                                  file_id=file_id,
                                  delivery_method=message.text.lower(),
                                  db=db)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–ø–æ—Å–æ–±—É

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–≥–æ "–∫—Ä–∞—Å–∏–≤–æ–º—É" –∏–º–µ–Ω–∏
        file_name = await get_file_name(user_data['chosen_file'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—à–ª–∏ –ª–∏ –º—ã —Ñ–∞–π–ª
        if not file_name:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞.")
            return
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–ø–æ—Å–æ–±—É
        file_name = await get_file_name(user_data['chosen_file'])
        if not file_name:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞.")
            return

        if message.text == "–í —á–∞—Ç":
            await send_file_in_chat(file_name, message)
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSE_FILE
            await states.UserState.CHOOSE_FILE.set()
            await send_file_list(message, state)

        elif message.text == "–ù–∞ –ø–æ—á—Ç—É":
            await states.UserState.ASKING_EMAIL.set()
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")


async def process_email(message: types.Message, state: FSMContext):
    email_address = message.text
    user_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    with db_session() as db:
        user = db.query(BotUser).filter(BotUser.telegram_id == message.from_user.id).first()
        if user:
            user.email_address = email_address

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
    file_name = await get_file_name(user_data['chosen_file'])
    if not file_name:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞.")
        return

    file_path = get_full_file_path(file_name)
    send_email(email_address, email_subject, email_body, file_path, file_name)

    await message.answer(email_send)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSE_FILE
    await states.UserState.CHOOSE_FILE.set()
    await send_file_list(message, state)
